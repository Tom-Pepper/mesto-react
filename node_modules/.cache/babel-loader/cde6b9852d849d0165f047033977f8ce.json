{"ast":null,"code":"/** Класс API для работы с сервером.\n * Описаны методы для работы с карточками, которые тянутся с сервера и отправляются на сервер\n */\nconst api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-18/',\n  headers: {\n    authorization: \"36f02e32-425e-4cd6-9a5e-ab45df68f83b\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;\n\nclass Api {\n  constructor(config, errorHandler) {\n    this._url = config.url;\n    this._headers = config.headers;\n    this._errorHandler = errorHandler;\n  }\n\n  _getResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(this._errorHandler(res.status));\n    }\n  }\n\n  getCards() {\n    return fetch(`${this._url}cards`, {\n      headers: this._headers\n    }).then(res => this._getResponse(res));\n  }\n\n  getUserData() {\n    return fetch(`${this._url}users/me`, {\n      headers: this._headers\n    }).then(res => this._getResponse(res));\n  }\n\n  getInitialData() {\n    return Promise.all([this.getUserData(), this.getCards()]);\n  }\n\n  editProfile(name, job) {\n    return fetch(`${this._url}users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: job\n      })\n    }).then(res => this._getResponse(res));\n  }\n\n  addNewCard(name, link) {\n    return fetch(`${this._url}cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => this._getResponse(res));\n  }\n\n  likeCard(id) {\n    return fetch(`${this._url}cards/likes/${id}`, {\n      method: \"PUT\",\n      headers: this._headers\n    }).then(res => this._getResponse(res));\n  }\n\n  dislikeCard(id) {\n    return fetch(`${this._url}cards/likes/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => this._getResponse(res));\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._url}cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => this._getResponse(res));\n  }\n\n  uploadAvatar(url) {\n    return fetch(`${this._url}users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: url\n      })\n    }).then(res => this._getResponse(res));\n  }\n\n}","map":{"version":3,"sources":["/Users/artem/Desktop/dev/mesto-react/src/utils/Api.js"],"names":["api","Api","url","headers","authorization","constructor","config","errorHandler","_url","_headers","_errorHandler","_getResponse","res","ok","json","Promise","reject","status","getCards","fetch","then","getUserData","getInitialData","all","editProfile","name","job","method","body","JSON","stringify","about","addNewCard","link","likeCard","id","dislikeCard","deleteCard","uploadAvatar","avatar"],"mappings":"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","sourcesContent":["/** Класс API для работы с сервером.\n * Описаны методы для работы с карточками, которые тянутся с сервера и отправляются на сервер\n */\nconst api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-18/',\n  headers: {\n    authorization: \"36f02e32-425e-4cd6-9a5e-ab45df68f83b\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;\n\nclass Api {\n  constructor(config, errorHandler) {\n    this._url = config.url;\n    this._headers = config.headers;\n    this._errorHandler = errorHandler;\n  }\n\n  _getResponse(res) {\n    if(res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(this._errorHandler(res.status));\n    }\n  }\n\n  getCards() {\n    return fetch(`${this._url}cards`, {\n      headers: this._headers\n    })\n      .then(res => this._getResponse(res))\n  }\n\n  getUserData() {\n    return fetch(`${this._url}users/me`,\n      {\n        headers: this._headers\n      })\n      .then(res => this._getResponse(res))\n  }\n\n  getInitialData() {\n    return Promise.all([this.getUserData(), this.getCards()]);\n  }\n\n  editProfile(name, job) {\n    return fetch(`${this._url}users/me`,\n      {\n        method: \"PATCH\",\n        headers: this._headers,\n        body: JSON.stringify({\n          name: name,\n          about: job\n        })\n      })\n      .then(res => this._getResponse(res))\n  }\n\n  addNewCard(name, link) {\n    return fetch(`${this._url}cards`,\n      {\n        method: \"POST\",\n        headers: this._headers,\n        body: JSON.stringify({\n          name: name,\n          link: link\n        })\n      })\n      .then(res => this._getResponse(res))\n  }\n\n  likeCard(id) {\n    return fetch(`${this._url}cards/likes/${id}`,\n      {\n        method: \"PUT\",\n        headers: this._headers\n      })\n      .then(res => this._getResponse(res))\n  }\n\n  dislikeCard(id) {\n    return fetch(`${this._url}cards/likes/${id}`,\n      {\n        method: \"DELETE\",\n        headers: this._headers,\n      })\n      .then(res => this._getResponse(res))\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._url}cards/${id}`,\n      {\n        method: \"DELETE\",\n        headers: this._headers,\n      })\n      .then(res => this._getResponse(res))\n  }\n\n  uploadAvatar(url) {\n    return fetch(`${this._url}users/me/avatar`,\n      {\n        method: \"PATCH\",\n        headers: this._headers,\n        body: JSON.stringify({\n          avatar: url\n        })\n      })\n      .then(res => this._getResponse(res))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}