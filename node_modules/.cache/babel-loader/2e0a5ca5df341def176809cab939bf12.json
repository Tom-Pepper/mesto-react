{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/artem/Desktop/dev/mesto-react/src/components/Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport Card from './Card';\nimport CurrentUserContext from \"../contexts/CurrentUserContext\";\n\nfunction Main({\n  isEditAvatarPopupOpen,\n  isEditProfilePopupOpen,\n  isAddPlacePopupOpen,\n  onCardClick\n}) {\n  _s();\n\n  //Подписка на контекст CurrentUserContext\n  const currentUser = useContext(CurrentUserContext); //Стейт для карточек\n\n  const [cards, setCards] = useState([]); //Получаем данные по пользователю и карточки с сервера\n\n  useEffect(() => {\n    api.getCards().then(res => {\n      setCards(res);\n    }).catch(err => console.log(err));\n  }, []); //Функция лайка карточки\n\n  function handleCardLike(card) {\n    //Проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id); // Отправляем запрос в API и получаем обновлённые данные карточки\n\n    api.changeLikeCardStatus(card._id, !isLiked).then(newCard => {\n      // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n      const newCards = cards.map(c => c._id === card._id ? newCard : c); // Обновляем стейт\n\n      setCards(newCards);\n    }).catch(err => console.log(err));\n  } //Функция удаления карточки, по аналогии с функцией лайка\n\n\n  function handleCardDelete(card) {\n    api.deleteCard(card._id).then(() => {\n      setCards(cards.filter(item => item._id !== card._id));\n    }).catch(err => console.log(err));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"profile\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profile__wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profile__avatar-wrapper\",\n          onClick: isEditAvatarPopupOpen,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"profile__avatar-edit-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"profile__avatar\",\n            src: `${currentUser.avatar}`,\n            alt: \"\\u0410\\u0432\\u0430\\u0442\\u0430\\u0440 \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profile__info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"profile__info-name\",\n            children: currentUser.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"profile__info-job\",\n            children: currentUser.about\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"profile__edit-button\",\n            onClick: isEditProfilePopupOpen\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"profile__add-button\",\n        onClick: isAddPlacePopupOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"elements\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        onCardClick: onCardClick,\n        onCardLike: handleCardLike,\n        onCardDelete: handleCardDelete\n      }, card._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"xialjJtjpodxuq9uLrhXqvEdCwA=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/artem/Desktop/dev/mesto-react/src/components/Main.js"],"names":["React","useState","useEffect","useContext","api","Card","CurrentUserContext","Main","isEditAvatarPopupOpen","isEditProfilePopupOpen","isAddPlacePopupOpen","onCardClick","currentUser","cards","setCards","getCards","then","res","catch","err","console","log","handleCardLike","card","isLiked","likes","some","i","_id","changeLikeCardStatus","newCard","newCards","map","c","handleCardDelete","deleteCard","filter","item","avatar","name","about"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react';\nimport api from '../utils/api';\nimport Card from './Card';\nimport CurrentUserContext from \"../contexts/CurrentUserContext\";\n\nfunction Main({ isEditAvatarPopupOpen, isEditProfilePopupOpen, isAddPlacePopupOpen, onCardClick }) {\n  //Подписка на контекст CurrentUserContext\n  const currentUser = useContext(CurrentUserContext);\n\n  //Стейт для карточек\n  const [cards, setCards] = useState([]);\n\n  //Получаем данные по пользователю и карточки с сервера\n  useEffect(() => {\n    api.getCards()\n      .then(res => {\n        setCards(res);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  //Функция лайка карточки\n  function handleCardLike(card) {\n    //Проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api.changeLikeCardStatus(card._id, !isLiked).then((newCard) => {\n      // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n      const newCards = cards.map((c) => c._id === card._id ? newCard : c);\n      // Обновляем стейт\n      setCards(newCards);\n    })\n      .catch(err => console.log(err));\n  }\n\n  //Функция удаления карточки, по аналогии с функцией лайка\n  function handleCardDelete(card) {\n    api.deleteCard(card._id)\n      .then(() => {\n        setCards(cards.filter(item => item._id !== card._id));\n      })\n      .catch(err => console.log(err));\n  }\n\n  return (\n    <main className=\"content\">\n      <section className=\"profile\">\n        <div className=\"profile__wrapper\">\n          <div className=\"profile__avatar-wrapper\" onClick={isEditAvatarPopupOpen}>\n            <button type=\"button\" className=\"profile__avatar-edit-button\"></button>\n            <img className=\"profile__avatar\" src={`${currentUser.avatar}`} alt=\"Аватар пользователя\" />\n          </div>\n          <div className=\"profile__info\">\n            <h1 className=\"profile__info-name\">{currentUser.name}</h1>\n            <p className=\"profile__info-job\">{currentUser.about}</p>\n            <button type=\"button\" className=\"profile__edit-button\" onClick={isEditProfilePopupOpen}></button>\n          </div>\n        </div>\n        <button type=\"button\" className=\"profile__add-button\" onClick={isAddPlacePopupOpen}></button>\n      </section>\n      <section className=\"elements\">\n        {\n          cards.map(card => (\n            <Card\n              card={card}\n              key={card._id}\n              onCardClick={onCardClick}\n              onCardLike={handleCardLike}\n              onCardDelete={handleCardDelete}\n            />\n          ))\n        }\n      </section>\n    </main>\n  );\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}